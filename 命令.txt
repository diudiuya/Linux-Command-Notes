man.linuxde.net    查Linux命令网站
rm -f /var/run/yum.pid    如见安装是提示等待软件关闭时用

ctrl + p    上
ctrl + n    下
ctrl + b    左
ctrl + f    右
ctrl + u    删除光标前的字符
ctrl + d    删除光标后的字符
ctrl + w    清楚光标前的一段，空格间隔
ctrl + y    撤销删除
ctrl + e    行尾
ctrl + a    行首
ctrl + r    搜索输入记录




指令 [选项] [操作对象]
  空      *           ！

用法1：指令
用法2：指令 [操作对象]；
用法3：指令 [选项] [操作对象]；
用法4：指令[选项]
用法5：指令 [操作对象] [选项]




123#ls(list)    列出当前目录下的所有文件、文件夹名称
* -l    以详细列表显示
*-a    显示全部文件\目录，含隐藏文件\目录
*-h    以可读性较高的方式显示
！目录


1#pwd(print working directory)    显示当前工作路径

2#which    查看命令的所在目录
!命令    如:which ls

2#cd(change directory)    切换当前工作目录    
！路径

23#mkdir(make directory)    新建文件夹(目录)
*-p    递归，即一次性创建多层文件夹
！目录
！路径/目录
！目录1 目录2 目录3

2#touch(directory)
！文件
！路径/文件
！文件1 文件2 文件3

23#cp(copy)    拷贝文件/目录    复制的同时可改名
*-r    递归
！路径/源目文件目录 路径/目标文件目录名
！源目录\文件 目标目录\文件

2#mv(move)    移动，剪切   可用于重命名
！源目录\文件 目标目录\文件

23#rm()    删除，移除
*-f    强制（force），强制删除不需要按Y/N确认
*-r    递归
！文件\目录
！文件1\目录1 文件2\目录2 文件3\目录3

2#cat 查看文件内容    可用于合并文件，需要用到输出重定向符">"
！路径/文件
！路径/文件1 路径/文件2

23#grep    搜索
*-v    查看所指内容以外的其他内容
*-n    显示匹配内容的行号
*-i    忽略大小写



二、进阶指令

12#df    查看磁盘的空间
*-h    效果同ls命令

#free    查看内存使用情况    (默认以KB为单位)
*-m    以MB为单位查看

23#head    查看文件内容的前n行，默认为10行
*-n    n为一个常数，表示查看前n行
！路径/文件

23#tail    查看文件内容的末尾n行，默认为10行
*-n    n为一个常数，表示查看末尾n行
*-f    根据文件描述符进行追踪，当文件改名或被删除，追踪停止，实时查看文件动态，跟踪的是文件的inode
*-F   效果同上，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪
！路径/文件

#more 查看文件类似less


系统
2#less    查看文件，以辅助键操控，空格键为翻一页，输入数字这从输入的数字哪一行显示，q退出
！路径/文件

23#wc    统计文件内容信息
*-l    (lines)，行数，一般用这个
*-w    (words)，单词数
*-c    (bytes)，字节数
！路径/文件


时间
14#date    读取当前系统时间    CST表示当地时间
*+%F    (等价于  "+%Y-%m-%d")输出年月日，形式：2018-01-01
*+%T    (等价于  "%H:%M:%S")输出时分秒，形式：08:46:01
*"+%F %T"    (等价于  "+%Y-%m-%d %H:%M:%S")输出形式2018-01-01 08:46:01，用双引号括起来表示他们是一个整体
*-d "-n M"    获取 nM 前的时间，n为常数，M为时间单位（day为天，month为月，year为年）
*-d "+n M"    获取 nM 后的时间，n为常数，M为时间单位（day为天，month为月，year为年）

14#cal    日历（默认当月）
*-1    输出当月的日历（默认）
*-3    输出当月+上月+下月的日历
*-y n    n为是需要显示的年份
*-s    以周日开头显示（默认）
*-m    以周一开头显示

#stat 
!路径/文件


1#clear/ctrl+L    清屏命令与快捷键



三、高级指令

12#hostname    操作计算机名(读取、设置，主要用于读取)
*-f    输出当前主机的名中的FQDN(全限定域名)

12#id    查看用户的一些基本信息(含用户id，用户组id，附加组id)缺省是当前用户
！用户名

1#whoami    (显示当前登录的用户名)一般在shell使用


进程
14#ps    查看当前服务器的进程信息
*-e    列出全部的进程 
*-f    显示全部列

1#top    查看服务器进程占的资源性能(动态显示)
快捷键:
	q    退出
	M    按内存降序显示(大写)
	P    按cpu降序显示(大写)
	1    显示每个cpu的状态信息(数字1)


23#du    查看目录真实大小
*-s    summaries,只显示汇总大小
*-h    以高可读性显示
!路径/目录

5#find    查找文件
*-neme    按文件名称进行搜索(支持模糊搜索)
*-type    按文件类型进行搜索(f为文件,d为目录,l链接,b块设备,p管道,s套接字,c字符设备)
*-size    按类型大小
*-ctime    创建日期(-为指定日期以内的时间，+为指定日期以外的时间，默认单位 天 )
*-mtime    修改日期
*-atime    访问日期
*-maxdepth    限定最深层数(即以搜索目录为基准进入几级目录)
*-mindepth    指定最浅层数
	find /etc -type d               在/etc目录下查找所有目录
	find /etc -type f               在/etc目录下查找所有文件
	find /etc -neme 文件名\目录名    在/etc目录下查找指定 文件\目录
	find /etc -size +10M            查找/etc目录下大于10M的文件\目录(+为大于，-为小于; 默认单位k)
	find /etc -ctime -1             查找一天以内创建的
	find /etc -maxdepth 4           查找最大4级目录以内的所有文件
!!范围 选项 对象

5#service    控制软件服务的启动\停止\重启
*start    启动
*stop    停止
*restart    重启
!服务名称

2#kill    终止进程
!进程PID
!进程名

1#ifconfig    查看网卡

1#reboot    重启计算机
*-w    模拟重启,但是不重启(作用是:写开关机的日志信息)主要用于测试

1#shutdown    关机(慎用)
*-h now    立即关机
*-h 时间    定时关机
*-h 时间 "用户提示"    定时关机并将用户提示信息发给所有用户
*-c    取消关机计划,要是不行就Ctrl+c

1#init 0    1#halt    1#poweroff    都是关机命令

1#uptime    获取计算机持续在线时间(从开机到当前)

14#uname    获取计算机系统相关信息
*-a    获取详细的系统信息

14#netstat    查看网络连接信息(一般下列四个选项一起用)
*-t    列出tcp协议的连接
*-n    将服务名转换为ip地址,将协议名转换成端口号
*-l    过滤出"state(状态)"列中其值为LISTEN(监听)的连接
*-p    显示发起连接的进程pid和进程名称

2#man    (manual)手册,q键退出
!命令    如:man cd

23#ln    链接(即为文件取别名,类似备份但不占空间,源文件删除后,硬链接文件仍可以用)
*-s    软连接(即快捷方式)默认为硬链接
！源路径/文件 目标路径/文件



1#history    查看历史命令





#env    查看环境变量

#init    (有个配置文件,/etc/inittab)



用户的命令:

23#chgrp    更改文件/目录所在群组
*-r    递归更改，更改包括子文件


23#chown    更改文件/目录所在所有者
-r                     ――同上递归
!.群组名 文件名        ――只更改群组（开头有“.”，使用“：”也行）
!账户名:群组名 文件名  ――更改文件(夹)的拥有者，同时也可以更改群组


3#chmod    修改文件/目录权限（可读:4，可写:2，执行:1）
*(u/g/o/a)(+/-/=)(r/w/x)    如a=r,即全部改为可读
*-R                     ――递归更改，更改包括子文件
!文件名


2#adduser    添加用户（ubuntu下会自动为创建的用户指定主目录、系统shell版本，会在创建时输入用户密码；centos下一样）
!新用户名

23#useradd    添加用户（ubuntu下需要使用参数选项指定上述基本设置，
						如果不使用任何参数，则创建的用户无密码、
						无主目录、没有指定shell版本。；
						centos下一同adduser）
*-m    创建家目录
*-s    指定shell
*-p    设置密码
!新用户名

23#deluser    删除用户
*-r    同时删除用户目录
!用户名

12#passwd    设置/修改密码（默认是点前用户）
!用户名

2#usermod   为用户修改/追加组
*-d    修改home目录
*-g    修改主要组(gid)
*-G    修改所在组(groups)
*-a    追加组，一般后面跟着G参数
!用户名
!用户名 待修改组用户名

2#addgroup    添加群组
!新群组名

2#delgroup    删除群组
!群组名

1#whoami    查看当前用户

1234#id    查看id
*-g    只打印有效组
*-G    打印所有组的ID
*-u    输入当前用户ID
!用户名

3#setfacl    设置/修改acl
*-x    移除acl权限（移除掩码前需将其他所有权限移除后设置为"m::"即可）
*-m    添加/修改acl权限
*-b    清楚所有acl权限
*[u|g|m] : [用户名|组名] : [r|w|x]    (u对象为用户，g对象为群组，m为mask)
!文件名
例：setfacl -m u:username:rwx file.txt    为username用户添加对file.txt文件的rwx权限
例：setfacl -x u:username file.txt    将username用户对file.txt的acl权限移除
例：setfacl -m m::u file.txt    设置file.txt文件的掩码，acl权限会与掩码按位与运算后再生效
例：setfacl -b file.txt    将file.txt文件的所有acl权限清楚

2#getfacl    查看acl权限
!文件名

12#lsattr    查看文件的文件属性
! 文件名

#chattr    设置文件的文件属性（root也受限）
*[=-+]
*a    只可以对文件进行追加操作（不允许移动、删除等操作）
*i    不可以对文件操作

13#lastlog    查看用户最后一次的登录信息
*-u    指定用户
!用户名

12#last    查看用户历史登录信息
!用户名

12#lastb    查看用户的登录失败记录（写在/var/log/btmp文件中）
!用户名

12#finger    查看用户综合信息（需安装）
!用户名

1#runlevel    查看点前运行级别（详细man）
	/etc/rc*.d    文件对应每个运行级别，每个文件下都有对应的自启动服务
					S开头为开机启动，K开头为关机运行

#systemctl    
*list-unit-files    查看全部已安装的服务
*--type=*           类型
	例： systemctl list-unit-files --type=service
			查看所有服务器服务（enabled是自启动程序）

1#w    查看当前登录的用户、ip及正在执行的命令（就一个字母w）

1#top    查看当前启动的进程（具体参数百度）

23#ping    ping pong包
*-c    指定发送“echo request”数据包总量
*-s    指定每个数据包的大小，默认56
*-I    设置源地址或网络接口
!ip
!域名

23#fping    ping多个地址
*-g    ping网段  格式: ip/掩码
!IP地址 IP地址

#arping    测试ip冲突

#curl    下载指定链接下的内容
!域名、ip

#file    识别文件类型
!文件名

#hd    将二进制文件以十六进制的方式输出
!文件名


用法1：指令
用法2：指令 [操作对象]
用法3：指令 [选项] [操作对象]
用法4：指令 [选项]
用法5：指令 [操作对象] [选项]














查看特权数: cat /prooc/sys/kernel/cap_last_cap
特权详细： man capabilities
setcap    为程序设置特权
*-f    收回程序权限
*CAP_DAC_OVERRIDE    绕过wrx权限执行
*CAP_NET_BIND_SERVICE    可绑定1024以下的端口
*...    更多查看详细
!程序名


审计：
日志的位置
    /var/log/audit/audit.log
设计的配置
	/etc/audit/audit.conf  audit.rules
 		audit.conf    主要是控制审计服务的启动参数
		audit.rules    控制审计服务关注的规则
34#auditctl    查询和配置审计规则
*-l    列出审计规则
*-s    审计运行状态
*-w 需审计的对象 -p 权限rwxa -k key值用于标识    临时添加审计规则，重启审计后失效

3#ausearch    查看审计日志信息
*-k    以关键字为索引查询
*-f    以文件名为索引查询
*-ui    以用户id为索引查询
!key值(设置规则时给的那个)
!文件名
!uid(用户ID)

14#aureport    生成审计报告
*-au    与鉴权相关的报告
*-m    与用户相关的报告


嗅探：
12#tcpdump    
	linux命令行下使用的嗅探工具
	(详细参数信息查看man pcap-filter)
	条件之间可以使用与或非（and或&&，or或||，not或！）
*-v -vv    显示详细和更详细的的信息
*-i    指定网络接口（网卡）
*-w    将数据保存到指定文件，(.pcap)后缀
*host    指定ip、域名
*src host    指定 发送端 ip、域名
*dst host    指定 接收端 ip、域名
*port    指定端口
*src port    指定发送端端口
*dst port    指定接收端端口
!ip、域名
!端口号
!协议


#chsh    更改shell
*-s    指定新shell路径
!用户名

#nmap    端口扫描
*-p    指定端口
*-sP    以ping的方式判断目标是否在线存活
*-sT    以TCP连接的方式扫描目标，直接调用connect命令
*-sS    以TCP的syn扫描，（只是发起第一次握手报文syn报文，等待第二次握手报文返回，
						不会再发送第三次握手。服务器感知不到，未完成三次握手，
						accept就不会返回连接。 优先使用-sS，不行在用-sT）
*-sU    以UDP的方式扫描目标,一般不会响应，如果目标没开启任何服务会响应一个icmp报文
*-O    收集指纹，匹配nmap自己的 数据库，确定 操作系统 类型，对linux正确率不高,(大写字母o)
*-sV    与-O类似，加了版本检测，获取到服务的版本号等信息
!ip、域名
!网段    ip/掩码

#p0f    被动探测系统类型（只要有请求进来，就可以获取发请求主机的信息）中间是数字0
*-f    指定指纹文件，系统有一个自带的可以使用/etc/p0f/p0f.fp
*-i    等待监听的网卡（即接受请求的网卡）



防火墙：
#iptables    有4表5链N规则（重启操作系统时默认清除所有规则）
	语法: iptables [-t table] COMMAND chain CRITERIA -j TARGET
*-L    查看已设置的规则(-n,以点分十进制显示ip；--line-numbers，显示行号)
*-P    设置链默认策略为拒绝或接收（DROP|ACCEPT）
*-A    在链中追加规则
*-j    达成条件后的行为 拒绝或接收（DROP|ACCEPT）
*-D    删除指定规则（可以填序号、也可以填条件）
*-I    在链中插入规则（和-A好像差不多，不过可以指定位置，即序号）
*-R    替换规则（需指定序号）
*-F    清空所有规则
*-p    协议
*-s    指定源ip、网络号192.168.111.129  192.168.111.0/24
*-d    指定目标ip、网络号
*--sport    指定源端口（可以两个数字之间以“-”横岗间隔表示区间，下面一样）
*--dport    指定目标端口（指定）
*--icmp-type    指定icmp的类型，常用（0，8）详见man icmp
*-i    从网卡流入数据（一般用在INPUT和PREROUTING）
*-o    从网卡流出数据（一般用在OUTPUT和POSTROUTING）

#iptables-svae    输出当前防火墙的规则（可重导向">"到一个文件进行规则备份，
										方便下面命令使用，推荐以".rules"后缀）
#iptables-restore    导入防火墙规则（配合重导向"<"用，导入上面备份的文件）


TCP Wrapper    轻量级防火墙（与iptables的区别在于，iptables作用在内核，
								而TCP Wrapper则作用于链接了libwrap.so库的服务,
								可通过 which 命令查看服务路径，然后通过 ldd 命令查看）
	配置文件来达到控制访问    *作用顺序 hosts.allow > hosts.deny > 默认为允许
		/etc/hosts.allow    允许访问
		/etc/hosts.deny    拒绝访问
	语法：
        daemon_list : client_list 
            daemon_list 指的是服务列表，比如 sshd mysqld之类的服务， ALL作用全部服务
            client_list 指的是客户端列表，
                ip             192.168.177.170
                cidr           192.168.177.0/24
                作用全部地址    ALL
                域名
    例： sshd : 192.168.111.129    对192.168.111.129的主机访问ssh作出相应处理，
    								处理取决于放在哪个配置文件


定时任务
	配置文件/etc/crontab
		m       minute(0-59)    分钟  每个小时的第几分钟去执行
	    h       hour(0-23)      时    第几个小时去执行
	    dom     day of month(1-31)  一个月的第几天去执行
	    mon     month(1-12)     第几个月
	    dow     day of week(0-7)  一个星期的第几天  0=7=星期天
		user
		command
	可执行脚本在/etc/cron.*文件内（有多个）

1#history    查看shell执行历史
	也可以在用户目录下的.bash_history文件查看
	有几个环境变量：
		HISTFILE:       保存历史命令的文件， 默认是 ~/.bash_history
		HISTFILESIZE:   历史文件中包含的最大行数。
		HISTSIZE:       history命令中展现的历史数量行数。
		HISTTIMEFORMAT: 保存历史命令的时间格式。(这个值为空那么将不记录时间)
		在用户家目录下.bashrc文件内修改
			例： export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S"

日志文件：
	/var/log/messages: 一般的系统日志
	/var/log/kern.log: 系统内核日志    可以查看是否有硬件非法接入
	/var/log/boot.log: 系统启动日志    查看是否有非法关机、重启等
	/var/log/auth.log: 登录相关的日志, 比如ssh/sudo成功失败的日志都在这里
						查看是否有鉴权操作
	/var/log/cron.d: cron计划任务的执行日志
	/var/log/audit/* : 审计文件

查看可疑进程：
	查看该进程启动的完整命令行:       ps eho command -p $PID
	查看该进程启动时候所在的目录:     readlink /proc/$PID/cwd
	查看该进程启动时的完整环境变量:   strings -f /proc/$PID/environ | cut -f2 -d ' '
	列出该进程所打开的所有文件:       lsof -p $PID
	查看当前主机的网络连接情况:       netstat -apn | grep $PID

固定IP/静态IP：
	在/etc/network/interfaces文件内添加
	auto eth0    
　　iface eth0 inet static //配置eth0使用默认的静态地址
　　address 192.168.77.133 //设置eth0的IP地址
　　netmask 255.255.255.0 //配置eth0的子网掩码
　　gateway 192.168.77.254 //配置当前主机的默认网关





域名收集：
2#dnsenum    枚举dns的信息
*--enum
!域名
	例: dnsenum --enum 163.com    查看163的dns解析信息
	记录含义：
		A类记录（ip地址）
    	dns 记录
    	MX记录（作为电子邮件服务器的时候IP地址）

2#nslookup    获取基本的A记录
!域名

2#whois    列出域名的相关信息、如注册信息等
!域名

2#traceroute    探测到达域名地址需要经过多少跳，及经过多少路由等
!域名


暴力破解：
#hydra
*-l    指定单个用户名（小写字母）
*-L    指定用户名字典（用户名列表，即文本文档之类的）
*-p    指定单个用户口令（小写字母）
*-P    指定用户口令字典（用户口令列表，同用户名）
*-t    指定并行任务数量，默认16
*-e    额外检查，n 代表空口令， s代码用户名， r代码用户名称逆序（反向）
*-vV    显示详细过程
*-o    输出login/passwd 对到指定的文件，即将结果输出到文件
*IP    靶机IP地址
*ssh    被攻击的协议（服务名称， telnet、ftp、pop3、ssh...）
	例: hydra -l msfadmin -P passwd.txt -e nsr -vV -o ssh_ok.log  192.168.16.204 ssh

#hashcat    破解哈希值
	语法: hashcat [options] hashfile [mask|wordfiles|directories]
*-m    指定算法类型, Ubuntu默认使用sha-512，值用1800
--show    直接显示在终端
	例: hashcat -m 1800 哈希值列表文件 密码字典

#dirb    暴力检索隐藏链接（即用url_base与wordlist_file内的字符串拼接，
							并发出请求等待响应结果）
		/usr/share/wordlist/dirb/下有自带字典，也可以在SVN Digger项目下找开源的字典
	语法: dirb <url_base> <url_base> [<wordlist_file(s)>] [options]
	例: dirb http://testphp.vulnweb.com/ 
		dirb http://testphp.vulnweb.com/ ./wordlist_file


口令字典工具:
crunch    枚举生成字符集
	语法: crunch <min-len> <max-len> [<charset string>] [options]
		<min-len>    最小长度
		<max-len>    最大长度
		[<charset string>]    字符集， 可用-f指定字符集在man文档内看详细
		[options]
	例: crunch 2 3 1234    将字符1、2、3、4以两位数到三位数进行排列组合

2#cupp
*-i    交互生成字典，即根据你输入的信息进行组合序列
*-l    从cupp数据库下载


arp欺骗：
#arpspoof
	语法: arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host
*-i    指定本机网卡名
*-t    指定目标ip 伪装的主机ip或网关
	例: arpspoof -i eth0(本机网卡) -t 192.168.111.135(目标) 192.168.111.129(伪装)
		将/proc/sys/net/ipv4/ip_forward文件设为1则可以实现转发

#arp
*-s    将ip与mac关联（一般用来写死网关或共享硬件如打印机等）  如: ip mac
*-f    读取文件列表， 文件格式同上，一个关联写一行


netwox工具箱:
	netwox进入交互页面，3是查看工具列表，0退出
	73是synflood攻击
	netwox id --help|--help2    查看指定id的工具详细用法


用法1：指令
用法2：指令 [操作对象]
用法3：指令 [选项] [操作对象]
用法4：指令 [选项]
用法5：指令 [操作对象] [选项]




