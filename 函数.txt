打开文件
int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);
参数:
	const char *pathname    文件名/路径
	int flags               标志位
		必须:
			O_RDONLY    只读
			O_WRONLY    只写
			O_RDWR    可读可写
		可选:
			O_CREAT       文件不存在则创建文件，使用此选项时需使用mode说明文件的权限
			O_EXCL        如果同时指定了O_CREAT，且文件已经存在，则出错
			O_TRUNC       如果文件存在，则清空文件内容
			O_APPEND      写文件时，数据添加到文件末尾
			O_NONBLOCK    对于设备文件, 以O_NONBLOCK方式打开可以做非阻塞I/O

	mode_t mode             权限，八进制数
返回值: 
	成功返回0
	失败返回-1并编写error




查看文件状态
int stat(const char *pathname, struct stat *buf);      常规
int fstat(int fd, struct stat *buf);                   应用有文件描述符时
int lstat(const char *pathname, struct stat *buf);     可以识别链接文件
参数:
	int fd                   文件描述符
	const char *pathname     文件名/路径
	struct stat *buf         结构体，用于存储返回的信息，man 2 stat查看，判断文件类型可以用宏函数
															类型宏名(获得的类型) 例: S_ISREG(buf->st_mode)
返回值: 
	成功返回0
	失败返回-1并编写error



查看文件权限
int access(const char *pathname, int mode);
参数:
	const char *pathname     文件名/路径
	int mode                 需要检测的权限
		R_OK    读权限
		W_OK    写权限
		X_OK    执行
		F_OK    文件是否存在
返回值: 
	成功返回0
	失败返回-1并编写error



控制文件大小
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length);
参数:
	int fd              文件描述符
	const char *path    文件名/目录
	off_t length        需修改的大小，小于原值则删除至指定大小，反之则扩展
返回值: 
	成功返回0
	失败返回-1并编写error



修改文件名
int rename(const char *oldpath, const char *newpath);
参数:
	const char *oldpath    原名
	const char *newpath    新名
返回值: 
	成功返回0
	失败返回-1并编写error



修改工作目录（作用当前进程）
int chdir(const char *path);
int fchdir(int fd);
参数:
	int fd              文件描述符，可写标准输入的描述符 STDIN_FILENO
	const char *path    文件名/路径
返回值: 
	成功返回0
	失败返回-1并编写error



获取当前工作目录
char *getcwd(char *buf, size_t size);
参数:
	char *buf      用于存储路径
	size_t size    buf大小
返回值: 
	成功返回buf的首地址
	失败返回NULL并编写error



拷贝文件描述符
int dup(int oldfd);
参数:
	int oldfd    旧文件描述符
返回值: 
	成功返回 新的文件描述符
	失败返回-1并编写error



重定向文件描述符
int dup2(int oldfd, int newfd);
参数:
	int oldfd    旧文件描述符
	int newfd    指定新的文件描述符，如指定的描述符已占用者先关闭占用的文件描述符
返回值: 
	成功返回 新的文件描述符
	失败返回-1并编写error



控制文件描述符
改变已打开的文件性质，fcntl针对描述符提供控制。
int fcntl(int fd, int cmd, ... /* arg */);
参数: 
	fd: 操作的文件描述符
	cmd: 操作方式
			1) 复制一个现有的描述符（cmd=F_DUPFD）
			2) 获得／设置文件描述符标记(cmd=F_GETFD或F_SETFD)
			3) 获得／设置文件状态标记(cmd=F_GETFL或F_SETFL)
			4) 获得／设置异步I/O所有权(cmd=F_GETOWN或F_SETOWN)
			5) 获得／设置记录锁(cmd=F_GETLK, F_SETLK或F_SETLKW)
	arg: 针对cmd的值，fcntl能够接受第三个参数int arg。
返回值: 
	成功: 返回某个其他值
	失败: -1
例:
	int flog = fcntl(fd, F_GETFL);    获取fd描述符的标志位
	flog |= O_NONBLOCK;               将非阻塞位或进flog标志位中
	fcntl(int fd, F_SETFL, flog);     将位或后的flog设置进fd文件描述符中



创建硬链接
int link(const char *oldpath, const char *newpath);
参数:
	const char *oldpath    源文件名
	const char *newpath    硬链接名
返回值: 
	成功返回0
	失败返回-1并编写error



创建软链接
int symlink(const char *target, const char *linkpath);
参数:
	const char *target      源文件名
	const char *linkpath    硬链接名
返回值: 
	成功返回0
	失败返回-1并编写error



删除软链接
int unlink(const char *pathname);
参数:
	const char *pathname    软链接名/路径
返回值: 
	成功返回0
	失败返回-1并编写error



创建目录
int mkdir(const char *pathname, mode_t mode);
参数:
	const char *pathname    文件名/路径
	mode_t mode             文件权限，八进制数
返回值: 
	成功返回0
	失败返回-1并编写error



打开目录
DIR *opendir(const char *name);
读取目录
struct dirent *readdir(DIR *dirp);   结构体需去man查
关闭目录
int closedir(DIR *dirp);






























进程: 

创建子进程
pid_t fork(void);
返回值: 
	成功 父进程返回子进程id，子进程返回0
	失败返回-1并编写error

pid_t vfork(void);
	与fork的区别在于，vfork不会另外创建一个地址空间，在调用exec或exit前使用父进程的地址空间，
	在调用exec或exit前父进程不会继续执行下面的代码
	如不调用exec或exit子进程会见父进程的地址空间释放，当父进程释放是会出现段错误
返回值: 
	成功 父进程返回子进程id，子进程返回0
	失败返回-1并编写error


回收子进程资源
pid_t wait(int *status);等待子进程结束并回收资源(阻塞)
参数:
	int *status    保存子进程退出的状态信息，可使用特定宏取出相应信息，可写NULL
			WIFEXITED(status)   判断子进程释放正常返回，是则true
			WEXITSTATUS(status)    获取子进程的return返回值
返回值: 
	成功返回 子进程ID
	失败返回 -1



pid_t waitpid(pid_t pid, int *status, int options);
参数:
	pid_t pid      进程号
		>0     指定进程; 
		=0     同一 进程组 
		=-1    任意子进程 * 
		<-1    指定 进程组，绝对值
	int *status    保存子进程退出的状态信息，可使用特定宏取出相应信息，可写NULL
		WIFEXITED(status)      判断子进程释放正常返回，是则true
		WEXITSTATUS(status)    获取子进程的return返回值
		...    man查
	int options    细化操作
		0    与wait相同(阻塞)
		WNOHANG    不阻塞，立即返回，=0还有存活的进程; <0没有子进程; >0回收进程的id *
返回值: 
	成功返回 子进程ID
	失败返回 -1并编写error



启动进程exec族: 
启动指定指定程序: 
int execl(const char *path, const char *arg, .../* (char  *) NULL */);
参数:
	const char *path        程序路径
	const char *arg         程序名
	...                     为程序传参
	/* (char  *) NULL */    最后加上NULL结尾，参数列表 必须 加上一个NULL参数结尾
返回值:
	成功 不返回，一去不复返
	失败返回 -1并编写error

int execlp(const char *file, const char *arg, .../* (char  *) NULL */);
参数:
	const char *file        程序名，与上面函数的区别: 自动从PATH环境变量中寻找
	const char *arg         程序名
	...                     为程序传参
	/* (char  *) NULL */    最后加上NULL结尾，参数列表 必须 加上一个NULL参数结尾
返回值:
	成功 不返回，一去不复返
	失败返回 -1并编写error

int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */);
参数:
	const char *file          程序名
	const char *arg           程序名
	...                       为程序传参
	/*, (char *) NULL         最后加上NULL结尾，参数列表 必须 加上一个NULL参数结尾
	char * const envp[] */    可用于修改环境变量
返回值:
	成功 不返回，一去不复返
	失败返回 -1并编写error




进程间通信:

无名管道:
int pipe(int pipefd[2]);
参数:
	int pipefd[2]    用于存储读写端
		pipefd[0]    读端
		pipefd[1]    写端
返回值:
	成功返回0
	失败返回-1并编写error
运行机制:
	1、read默认带阻塞功能
	2、write写入数据时，缓冲区满后也会阻塞
	3、读端全部关闭后，如果子进程有写操作，子进程会收到SIGPIPE信号，关闭子进程
	4、写端全部关闭后，读操作不会阻塞
特点:
	1、半双工
	2、数据只能一端写另一边读
	3、遵循先入先出原则
	4、数据是无格式的，要用户预先约定好规则
	5、管道不是普通文件、不是文件系统，只存放在内存中
	6、管道有缓冲区，不同系统大小有差异
	7、读取管道是剪切操作，数据读取后将被丢弃
	8、管道没有名字，只能在公共祖先的进程之间通信



命名管道
int mkfifo(const char *pathname, mode_t mode);
参数:
	const char *pathname    管道存放路径/文件名
	mode_t mode             管道文件权限
返回值:
	成功返回0
	失败返回-1并编写error
运行机制:
	one 可读可写方式打开管道:
		1、read带阻塞
		2、全部关联到管道的文件描述符关闭后，会清空缓冲区(即清空残留在管道内的数据)
		3、如果缓冲区满了，write操作会阻塞
	two 以只读或只写方式打开管道:
		阻塞(即没有 位或O_NONBLOCK 标志位):
			1、以 只读 方式open时会阻塞，只要有 写 的进程运行才可以 成功打开管道
			2、以 只写 方式open时会阻塞，只要有 读 的进程运行才可以 成功打开管道
			3、以 只读、只写方式 打开管道时会阻塞，read读取时也会阻塞
			4、缓冲区满时，执行写操作会阻塞
			5、双方通信时，写进程关闭后，读进程不会阻塞，知道有写进程重新打开
			6、双方通信时，读进程关闭后，写进程执行写入操作会收到SIGPIPE信号，关闭进程
		非阻塞(即 位或了O_NONBLOCK 标志位):
			1、只读 方式打开，没有 写进程 运行中，open不会阻塞
			2、只写 方式打开，没有 读进程 运行中，open失败返回-1
			3、read、write读写管道不会阻塞
			4、双方通信时，读进程关闭后，写进程执行写入操作会收到SIGPIPE信号，关闭进程
特点:
	1、半双工
	2、遵循先入先出原则
	3、数据是无格式的，要用户预先约定好规则
	4、FIFO在文件系统中作为一个特殊文件存在，数据仍然存在内存中
	5、管道有缓冲区，不同系统大小有差异
	6、读取管道是剪切操作，数据读取后将被丢弃
	7、进程关闭后，FIFO仍然存放在文件系统中，便于以后使用
	8、FIFO是有名字的，使不相关的进程可以通过名字打开FIFO进行通信



内存映射:
void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
参数:
	void *addr       指定映射地址空间位置，一般写NULL用为无法确定映射位置是否被占用，
										最好不要改动，因为释放是会出错
	size_t length    映射区大小，多少无所谓，以文件大小为准，
								可以使用ftruncate函数修改文件大小，
								文件大小不可以为0
	int prot         映射区操作权限(如需同时拥有多个权限则位或“|”即可)
									open时不可以没有读操作，因为映射时会自动执行一次读操作，
									必须 <= open权限
		PROT_READ    可读 *
		PROT_WRITE   可写 *
		PROT_EXEC    可执行
		PROT_NONE    没有权限
	int flags        映射区共享权限
		MAP_SHARED   共享的 *
		MAP_PRIVATE  私有的
	int fd           open文件后的文件描述符
	off_t offset     从文件的指定位置开始映射，一般写0中文件开头开始映射，
											必须是4096的整数倍，因为4k在磁盘中是1页
返回值:
	成功返回 映射区的首地址，最好判断下返回值
	失败返回 MAP_FAILED即(void *)-1 并编写error



解除内存映射
int munmap(void *addr, size_t length);
参数:
	void *addr       映射区的首地址
	size_t length    映射区长度
返回值:
	成功返回0，最好判断下返回值
	失败返回-1并编写error




信号:

发送信号, 给指定进程发送指定信号信号
int kill(pid_t pid, int sig);
参数:
	pid_t pid    指定进程ID
		>0     指定进程 *
		=0     同一 进程组 
		=-1    发送给所有进程(需权限)
		<-1    指定 进程组，绝对值
	int sig    信号宏或编号，可在man 7 signal查看
返回值:
	成功返回 0并发送信号
	失败返回-1并编写error



发送信号, 给自己发送指定信号
int raise(int sig);
参数:
	int sig    信号宏或编号，可在man 7 signal查看
返回值:
	成功返回 0并发送信号
	失败返回 非零



发送信号, 给自己发送 6 SIGABRT信号，并产生core文件
void abort(void);
等同: abort() == kill(getpid(), SIGABRT);



闹钟, 到点后先进程发送 14 SIGALRM信号
unsigned int alarm(unsigned int seconds);
参数:
	unsigned int seconds    闹钟时间, 如果为0则取消闹钟
返回值:
	如在此之前没要闹钟，则返回0， 如有这返回上次闹钟剩余时间，
	例: int ret = alarm(10); /*ret == 0*/
		sleep(3); 
		ret = alarm(12); /*ret == 7*/



周期性闹钟，第一次间隔 M秒 后发送信号，之后将每隔 N秒 将发送信号
int setitimer(int which, const struct itimerval *new_value, 
								struct itimerval *old_value);
参数:
	int which                            闹钟类型
		ITIMER_REAL       实际时间, 14 SIGALRM信号 发送time命令可查看进程使用时间 *
		ITIMER_VIRTUAL    用户态使用时间, 26 SIGVTALRM信号
		ITIMER_PROF       内核态时间与用户态时间相加时间, 27 SIGPROF信号
	const struct itimerval *new_value    时间结构体，传入参数，设置闹钟时间结构体在man手册内
	struct itimerval *old_value          时间结构体，传出参数，返回上一次周期性闹钟的时间，可填NULL
			struct itimerval {
				struct timeval it_interval; /*周期性时间 Interval for periodic timer */
				struct timeval it_value;    /*第一次时间 Time until next expiration */
			};
			struct timeval {
				time_t      tv_sec;         /*(秒) seconds */
				suseconds_t tv_usec;        /*(微秒) microseconds */
			};
返回值:
	成功返回 0并发送信号
	失败返回-1并编写error



信号集合操作:

获取 未决信号集
int sigpending(sigset_t *set);
参数:
	sigset_t *set    传出参数，将未决信号集写入这个参数
返回值:
	成功返回 0
	失败返回-1并编写error



设置阻塞集
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
参数:
	int how                控制动作
		SIG_BLOCK      将阻塞集与set集合做并集运算，即将set集合中的1置于阻塞集中
		SIG_UNBLOCK    从阻塞集中删除set集合中为1的值
		SIG_SETMASK    将set集合设置为阻塞集
	const sigset_t *set    需要设置的信号集
	sigset_t *oldset       将阻塞集原来的集合传出，传出参数
返回值:
	成功返回 0
	失败返回-1并编写error


int sigfillset(sigset_t *set);                       //将set集合置 1

int sigemptyset(sigset_t *set);                      //将set集合置空即置0

int sigaddset(sigset_t *set, int signum);            //在set集合中添加signum信号

int sigdelset(sigset_t *set, int signum);            //将set集合中的signum信号删除
成功返回0，失败返回-1并编写error， 【上面几个函数相同】

int sigismember(const sigset_t *set, int signum);    //判断set集合中 是否存在 signum信号
存在则返回1，不存在则返回0



信号捕捉
typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
参数:
	int signum              需要捕捉的信号
	sighandler_t handler    执行动作，回调函数
		SIG_IGN    执行 忽略动作
		SIG_DFL    执行 默认动作
		自定义     传入自己写的函数名
返回值:
	成功返回 函数指针
	失败返回 SIG_ERR并编写error



信号捕捉，signal由于历史原因在不同版本的Unix和不同版本的Linux中可能有不同的行为，sigaction取而代之
int sigaction(int signum, const struct sigaction *act,
                     struct sigaction *oldact);
参数:
	int signum                     需要捕捉的信号
	const struct sigaction *act    要设置的动作信息, 传入参数
	struct sigaction *oldact       旧的动作信息, 传出参数
			struct sigaction {
				void (*sa_handler)(int);    回调函数，与signal的handler相同
				void (*sa_sigaction)(int, siginfo_t *, void *);    
						回调函数，一般不使用，当sa_flags为SA_SIGINFO时则调用这个回调，默认为sa_handler
				sigset_t sa_mask;    处理信号时所使用的 临时阻塞集，处理完信号后阻塞集将还原
				int sa_flags;    一般写0
				void (*sa_restorer)(void);    此参数不使用
			};

返回值:
	成功返回 0并发送信号
	失败返回-1并编写error




共享内存:









获取id号

用户:
uid_t getuid()    获取用户id
gid_t getgid()    获取用户组id

进程:
获取进程组ID
pid_t getpgrp()    获取进程组id(当前进程)
pid_t getpgid(pid_t pid)    获取指定进程的组id，pid=0则与getpgrp一样

修改进程组
int setpgid(pid_t pid, pid_t pgid)    修改指定进程的组id，修改pid的进程组为pgid

会话:
会话ID
pid_t getsid(pid_t pid)    获取会话id，pid=0则是当前进程的会话id
pid_t setsid()             新建会话，当前进程为会长, 注: 组长不可以新建会话，
									因为组长新建会话后，所在进程组将丢失组长


设置守护进程:
int daemon(int nochdir, int noclose); 

























线程:
char *strerror(int errnum);      打印线程的错误编号信息
pthread_t pthread_self(void);    返回线程号

创建线程
int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);
参数:
	pthread_t *thread                  线程id，传出参数
	const pthread_attr_t *attr         线程设属性，
	void *(*start_routine) (void *)    回调函数，创建出来的线程将要执行的代码块
	void *arg                          上面函数的传参
返回值:
	成功返回 0
	失败返回 错误编号即error, thread为未定义



回收线程资源
int pthread_join(pthread_t thread, void **retval);
参数:
	pthread_t thread    线程id，创建线程时给的
	void **retval       线程退出状态信息，传出参数
返回值:
	成功返回 0
	失败返回 错误编号即error



线程分离，将线程与进程分离，返回收系统自动回收资源(地址空间仍然使用进程的)
int pthread_detach(pthread_t thread);
参数:
	pthread_t thread    线程id，创建线程时给的
返回值:
	成功返回 0
	失败返回 错误编号即error



结束线程，终止 当前 进程(自杀)
void pthread_exit(void *retval);
参数:
	void **retval       线程退出状态信息, 传出参数, pthread_join的第二个参数接收
注:
	主线程(即main函数块)退出后，如还要线程存活则不会退出进程



取消线程，终止 指定 进程(他杀)
int pthread_cancel(pthread_t thread);
参数:
	pthread_t thread    线程id，创建线程时给的
返回值:
	成功返回 0
	失败返回 错误编号即error


取消线程状态，设置线程是否可以被取消, (取消时默认需要取消点，可通过下面函数进行设置是否需要遇到取消点)
int pthread_setcancelstate(int state, int *oldstate);
参数:
	int state        要设置的状态
		PTHREAD_CANCEL_ENABLE     可以被取消，默认是可以被取消
		PTHREAD_CANCEL_DISABLE    不可以被取消
	int *oldstate    传出原来的状态
返回值:
	成功返回 0
	失败返回 错误编号即error


设置是否 立即被取消
int pthread_setcanceltype(int type, int *oldtype);
参数:
	int state        要设置的状态
		PTHREAD_CANCEL_DEFERRED        需要取消点，默认需要
		PTHREAD_CANCEL_ASYNCHRONOUS    立即取消，不需要取消点
	int *oldstate    传出原来的状态
返回值:
	成功返回 0
	失败返回 错误编号即error


取消点，取消点不仅仅是这个函数，系统调用的函数一般也算是取消点，(百度查下)
void pthread_testcancel(void);



线程属性结构体操作:

初始化/删除结构体
int pthread_attr_init(pthread_attr_t *attr);       初始化结构体
int pthread_attr_destroy(pthread_attr_t *attr);    删除结构体
参数:
	pthread_attr_t *attr    pthread_attr_t结构体
返回值:
	成功返回 0
	失败返回 错误编号即error


设置结构体是否线程分离
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
参数:
	pthread_attr_t *attr    pthread_attr_t结构体
	int detachstate         是否分离
		PTHREAD_CREATE_DETACHED    分离
		PTHREAD_CREATE_JOINABLE    不分离
返回值:
	成功返回 0
	失败返回 错误编号即error





互斥锁:

初始化锁
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;//静态初始化，下面的是动态，常用动态
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);总是返回0

上锁
int pthread_mutex_lock(pthread_mutex_t *mutex);

尝试上锁，与上锁的区别是，抢不到锁也不会阻塞
int pthread_mutex_trylock(pthread_mutex_t *mutex);

解锁
int pthread_mutex_unlock(pthread_mutex_t *mutex);

销毁锁
int pthread_mutex_destroy(pthread_mutex_t *mutex);

参数:
	pthread_mutex_t *mutex                  锁
	const pthread_mutexattr_t *mutexattr    锁的属性，如NULL则默认属性
返回值:
	成功返回 0
	失败返回 错误编号即error


条件变量:

初始化条件变量
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;//静态初始化，下面的是动态，常用动态
int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr);

阻塞等待条件变量
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);

定时等待条件变量
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, 
							const struct timespec *abstime);

唤醒阻塞，唤醒一个
int pthread_cond_signal(pthread_cond_t *cond);

唤醒阻塞，唤醒所有
int pthread_cond_broadcast(pthread_cond_t *cond);

销毁条件变量
int pthread_cond_destroy(pthread_cond_t *cond);

参数:
	pthread_cond_t *cond              条件变量
	pthread_condattr_t *cond_attr     条件变量的属性，如NULL则默认属性
	pthread_mutex_t *mutex            锁
	const struct timespec *abstime    等待时间，时间戳加需要等待的时间，
												如等20秒: abstime = time(NULL)+20;
		struct timespec {
			__kernel_time_t tv_sec;         /* 秒seconds */
			long        tv_nsec;        /* 纳秒nanoseconds */
		};

返回值:
	成功返回 0
	失败返回 错误编号即error



读写锁:
	读共享，写独占，写锁优先级高
		线程A加写锁成功, 线程B请求读锁    B阻塞
		线程A持有读锁, 线程B请求写锁    B阻塞
		线程A拥有读锁, 线程B请求读锁    B请求成功
		线程A持有读锁, 然后线程B请求写锁, 然后线程C请求读锁    B与C都阻塞，C等待B处理完后请求成功
		线程A持有写锁, 然后线程B请求读锁, 然后线程C请求写锁    B与C都阻塞，C先请求到锁

初始化读写锁
pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;//静态初始化，下面的是动态，常用动态
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock, 
						const pthread_rwlockattr_t *restrict attr);

读锁上锁
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);//尝试

写锁上锁
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);//尝试


销毁销毁锁
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);

参数:
	pthread_rwlock_t *restrict rwlock            读写锁
	const pthread_rwlockattr_t *restrict attr    读写锁属性
返回值:
	成功返回 0
	失败返回 错误编号即error



信号量:

初始化
int sem_init(sem_t *sem, int pshared, unsigned int value);

对信号量value减一，如定于零则阻塞
int sem_wait(sem_t *sem);
int sem_trywait(sem_t *sem);尝试
int sem_timedwait(sem_t *sem, 
		const struct timespec *abs_timeout);定时

对信号量value加一
int sem_post(sem_t *sem);

获取信号量数量
int sem_getvalue(sem_t *sem, int *sval);

销毁信号量
int sem_destroy(sem_t *sem);

参数:
	sem_t *sem            信号量
	int *sval             存放信号量的数量，传出参数
	int pshared           设置在进程中共享还是线程中共享
		= 0    线程间共享
		！0    进程间共享，存放在共享内存区域
	unsigned int value    信号量的初始数量
	const struct timespec *abs_timeout


返回值:
	成功返回 0
	失败返回 错误编号即error






名————————
函数——————————
参数:
	——————————————
返回值:
	成功返回 0并发送信号
	失败返回-1并编写error